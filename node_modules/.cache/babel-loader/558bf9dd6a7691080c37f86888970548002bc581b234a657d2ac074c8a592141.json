{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dominic\\\\Downloads\\\\dominic\\\\lasernasp2\\\\src\\\\components\\\\NotificationBell.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { IoIosNotificationsOutline } from 'react-icons/io';\nimport { toast } from 'react-toastify'; // Import the toast module\nimport 'react-toastify/dist/ReactToastify.css'; // Import toast styles\nimport './NotificationBell.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NotificationBell = ({\n  loggedInUserEmail\n}) => {\n  _s();\n  const [notificationCount, setNotificationCount] = useState(0);\n  const [error, setError] = useState(null);\n  const [notifications, setNotifications] = useState([]);\n  useEffect(() => {\n    fetchNotificationCount();\n  }, [loggedInUserEmail]); // Trigger effect whenever loggedInUserEmail changes\n\n  const fetchNotificationCount = async () => {\n    try {\n      console.log('Fetching notification count for user:', loggedInUserEmail); // Log the email being used for fetching\n      const response = await fetch(`/notifications/user/${encodeURIComponent(loggedInUserEmail)}`);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('Notification data:', data); // Log the notification data received\n        const unseenNotifications = data.filter(notification => !notification.seen); // Filter out seen notifications\n        setNotificationCount(unseenNotifications.length); // Set notification count based on unseen notifications\n        setNotifications(unseenNotifications); // Set the notifications array to unseen notifications\n        if (unseenNotifications.length > 0) {\n          // If there are new notifications, display a toast notification\n          toast.info(`You have ${unseenNotifications.length} new notifications`, {\n            position: 'top-right',\n            autoClose: 5000,\n            hideProgressBar: false,\n            closeOnClick: true,\n            pauseOnHover: true,\n            draggable: true,\n            progress: undefined\n          });\n        }\n      } else {\n        setError('Failed to fetch notification count');\n      }\n    } catch (error) {\n      setError('Error fetching notification count');\n    }\n  };\n  const handleBellClick = async () => {\n    try {\n      // Display notification details as toast\n      notifications.forEach(notification => {\n        toast.info(`You have ${notification.about}`, {\n          position: 'top-right',\n          autoClose: 5000,\n          hideProgressBar: false,\n          closeOnClick: true,\n          pauseOnHover: true,\n          draggable: true,\n          progress: undefined\n        });\n      });\n\n      // Update the seen status of notifications when bell is clicked\n      await Promise.all(notifications.map(async notification => {\n        const response = await fetch(`/notifications/${notification._id}`, {\n          method: 'PATCH',\n          headers: {\n            'Content-Type': 'application/json'\n          }\n        });\n        if (response.ok) {\n          // If update is successful, set seen status locally\n          setNotifications(prevNotifications => prevNotifications.map(prevNotification => prevNotification._id === notification._id ? {\n            ...prevNotification,\n            seen: true\n          } : prevNotification));\n        }\n      }));\n\n      // Add a delay of three seconds before reloading the page\n      setTimeout(() => {\n        window.location.reload();\n      }, 3000);\n    } catch (error) {\n      console.error('Error updating notification seen status:', error);\n      setError('Error updating notification seen status');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"notification-bell\",\n    onClick: handleBellClick,\n    \"aria-label\": \"Notifications\",\n    children: [/*#__PURE__*/_jsxDEV(IoIosNotificationsOutline, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), notificationCount > 0 && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"notification-badge\",\n      children: notificationCount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 33\n    }, this), error && /*#__PURE__*/_jsxDEV(\"span\", {\n      className: \"error-message\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(NotificationBell, \"lcfPu3W8iKPX5QHYtKPIAP5/YFo=\");\n_c = NotificationBell;\nexport default NotificationBell;\nvar _c;\n$RefreshReg$(_c, \"NotificationBell\");","map":{"version":3,"names":["React","useState","useEffect","IoIosNotificationsOutline","toast","jsxDEV","_jsxDEV","NotificationBell","loggedInUserEmail","_s","notificationCount","setNotificationCount","error","setError","notifications","setNotifications","fetchNotificationCount","console","log","response","fetch","encodeURIComponent","ok","data","json","unseenNotifications","filter","notification","seen","length","info","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","handleBellClick","forEach","about","Promise","all","map","_id","method","headers","prevNotifications","prevNotification","setTimeout","window","location","reload","className","onClick","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Dominic/Downloads/dominic/lasernasp2/src/components/NotificationBell.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { IoIosNotificationsOutline } from 'react-icons/io';\r\nimport { toast } from 'react-toastify'; // Import the toast module\r\nimport 'react-toastify/dist/ReactToastify.css'; // Import toast styles\r\nimport './NotificationBell.css';\r\n\r\nconst NotificationBell = ({ loggedInUserEmail }) => {\r\n  const [notificationCount, setNotificationCount] = useState(0);\r\n  const [error, setError] = useState(null);\r\n  const [notifications, setNotifications] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchNotificationCount();\r\n  }, [loggedInUserEmail]); // Trigger effect whenever loggedInUserEmail changes\r\n\r\n  const fetchNotificationCount = async () => {\r\n    try {\r\n      console.log('Fetching notification count for user:', loggedInUserEmail); // Log the email being used for fetching\r\n      const response = await fetch(`/notifications/user/${encodeURIComponent(loggedInUserEmail)}`);\r\n      if (response.ok) {\r\n        const data = await response.json();\r\n        console.log('Notification data:', data); // Log the notification data received\r\n        const unseenNotifications = data.filter(notification => !notification.seen); // Filter out seen notifications\r\n        setNotificationCount(unseenNotifications.length); // Set notification count based on unseen notifications\r\n        setNotifications(unseenNotifications); // Set the notifications array to unseen notifications\r\n        if (unseenNotifications.length > 0) {\r\n          // If there are new notifications, display a toast notification\r\n          toast.info(`You have ${unseenNotifications.length} new notifications`, {\r\n            position: 'top-right',\r\n            autoClose: 5000,\r\n            hideProgressBar: false,\r\n            closeOnClick: true,\r\n            pauseOnHover: true,\r\n            draggable: true,\r\n            progress: undefined,\r\n          });\r\n        }\r\n      } else {\r\n        setError('Failed to fetch notification count');\r\n      }\r\n    } catch (error) {\r\n      setError('Error fetching notification count');\r\n    }\r\n  };\r\n\r\n  const handleBellClick = async () => {\r\n    try {\r\n      // Display notification details as toast\r\n      notifications.forEach(notification => {\r\n        toast.info(`You have ${notification.about}`, {\r\n          position: 'top-right',\r\n          autoClose: 5000,\r\n          hideProgressBar: false,\r\n          closeOnClick: true,\r\n          pauseOnHover: true,\r\n          draggable: true,\r\n          progress: undefined,\r\n        });\r\n      });\r\n  \r\n      // Update the seen status of notifications when bell is clicked\r\n      await Promise.all(\r\n        notifications.map(async notification => {\r\n          const response = await fetch(`/notifications/${notification._id}`, {\r\n            method: 'PATCH',\r\n            headers: {\r\n              'Content-Type': 'application/json'\r\n            }\r\n          });\r\n          if (response.ok) {\r\n            // If update is successful, set seen status locally\r\n            setNotifications(prevNotifications => prevNotifications.map(prevNotification =>\r\n              prevNotification._id === notification._id ? { ...prevNotification, seen: true } : prevNotification\r\n            ));\r\n          }\r\n        })\r\n      );\r\n  \r\n      // Add a delay of three seconds before reloading the page\r\n      setTimeout(() => {\r\n        window.location.reload();\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.error('Error updating notification seen status:', error);\r\n      setError('Error updating notification seen status');\r\n    }\r\n  };\r\n  \r\n\r\n  return (\r\n    <button className=\"notification-bell\" onClick={handleBellClick} aria-label=\"Notifications\">\r\n      <IoIosNotificationsOutline />\r\n      {notificationCount > 0 && <span className=\"notification-badge\">{notificationCount}</span>}\r\n      {error && <span className=\"error-message\">{error}</span>}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default NotificationBell;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}